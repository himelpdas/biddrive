{{
html = """ user a template here of user the line below """
html = response.render('%s/%s.html' % (request.controller,request.function))

import re
import os
# try use latex and pdflatex
if os.system('which pdflatex > /dev/null')==0:
    from gluon.contrib.markmin.markmin2pdf import markmin2pdf
    def markmin_serializer(text,tag=None,attr={}):
       if tag==None: return re.sub('\s+',' ',text)
       if tag=='br': return '\n\n'
       if tag=='h1': return '# '+text+'\n\n'
       if tag=='h2': return '#'*2+' '+text+'\n\n'
       if tag=='h3': return '#'*3+' '+text+'\n\n'
       if tag=='h4': return '#'*4+' '+text+'\n\n'
       if tag=='p': return text+'\n\n'
       if tag=='li': return '\n- '+text.replace('\n',' ')
       if tag=='tr': return text[3:].replace('\n',' ')+'\n'
       if tag in ['table','blockquote']: return '\n-----\n'+text+'\n------\n'
       if tag in ['td','th']: return ' | '+text
       if tag in ['b','strong','label']: return '**%s**' % text
       if tag in ['em','i']: return "''%s''" % text
       if tag in ['tt','code']: return '``%s``' % text
       if tag=='a': return '[[%s %s]]' % (text,attr.get('_href',''))
       return text
   markmin=TAG(html).element('body').flatten(markmin_serializer)
   out,warning,errors=markmin2pdf(markmin)
   if errors:
      response.headers['Content-Type']='text/html'
      response.write(HTML(BODY(H1('errors'),LU(*errors),H1('warnings'),LU(*warnings))))
   else:
      response.headers['Content-Type']='application/pdf'
      response.write(out,escape=False)
   pass
else:
   # user pyfpdf
   def image_map(path):
       if path.startswith('/%s/static/' % request.application):
           return os.path.join(request.folder,path.split('/',2)[2])    
       return 'http%s://%s%s' % (request.is_https and 's' or '',request.env.http_host, path)
   from gluon.contrib.pyfpdf import FPDF, HTMLMixin
   from gluon.sanitizer import sanitize
   class MyFPDF(FPDF, HTMLMixin): pass
   pdf=MyFPDF()
   pdf.add_page()
   html = sanitize(html, escape=False)  #### should have better list of allowed tags
   pdf.write_html(html,image_map=image_map)
   response.headers['Content-Type']='application/pdf'
   response.write(pdf.output(dest='S'), escape=False)
   pass
}}
